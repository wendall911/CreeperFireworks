plugins {
    id 'multiloader-loader'
    id 'net.neoforged.gradle.userdev'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
    id 'me.modmuss50.mod-publish-plugin'
}

archivesBaseName = "${mod_id}"
version = neoforge_mod_version

runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
}

subsystems {
    parchment {
        minecraftVersion = "${parchment_mc_version}"
        mappingsVersion = "${parchment_version}"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    implementation group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-neoforge', version: "${spectrelib_version}+${minecraft_version}"
    jarJar group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-neoforge', version: "${spectrelib_version}+${minecraft_version}"

    // Testing mods
    runtimeOnly "curse.maven:configured-457570:5340194"
    runtimeOnly "curse.maven:catalogue-459701:5303328"
}

tasks.jarJar.configure {
    archiveClassifier.set("")
}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(project(":").projectDir.toString() + '/build/libs/changelog.txt');
    templateContent = file(project(":").projectDir.toString() + '/files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'version': version, 'minecraft_version': minecraft_version
    }

    it.into '../files/'
}

tasks.generateUpdates.mustRunAfter('jar', 'sourcesJar')

tasks.build.dependsOn('changelog', 'generateUpdates')

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'
def publishFile = project(":").projectDir.toString() + "/NeoForge/build/libs/${archivesBaseName}-${version}.jar"

publishMods {
    file = file(publishFile)
    changelog = file(changelogFile).text
    type = STABLE
    modLoaders.add('neoforge')

    if (project.hasProperty('cfcurseApiKey')) {
        curseforge {
            accessToken = project.cfcurseApiKey
            projectId = project.cfcurseId
            javaVersions.add(JavaVersion.toVersion("${java_version}"))
            clientRequired = true
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            embeds('spectrelib')
            optional('catalogue')
            optional('creeper-overhaul')
        }
    }
    if (project.hasProperty('cfModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.cfModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('creeper-overhaul')
        }
    }
    if (project.hasProperty('cfGithubToken')) {
    }
}
