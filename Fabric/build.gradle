plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id 'me.modmuss50.mod-publish-plugin'
}

version = fabric_mod_version
archivesBaseName = "${mod_id}"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_mc_version}:${parchment_version}@zip")
    })

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation "com.illusivesoulworks.spectrelib:spectrelib-fabric:${spectrelib_version}+${minecraft_version}"
    include "com.illusivesoulworks.spectrelib:spectrelib-fabric:${spectrelib_version}+${minecraft_version}"

    modRuntimeOnly("com.terraformersmc:modmenu:${mod_menu_version}") {
        transitive = false
    }

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    include group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-fabric', version: "${spectrelib_version}+${minecraft_version}"

    // Testing Mods
    //modRuntimeOnly "curse.maven:mod-XXX:XXX"
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'
def publishFile = project(":").projectDir.toString() + "/Fabric/build/libs/${archivesBaseName}-${version}.jar"

publishMods {
    file = file(publishFile)
    changelog = file(changelogFile).text
    type = STABLE
    modLoaders.add('fabric')

    if (project.hasProperty('cfcurseApiKey')) {
        curseforge {
            accessToken = project.cfcurseApiKey
            projectId = project.cfcurseId
            javaVersions.add(JavaVersion.toVersion("${java_version}"))
            clientRequired = true
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            embeds('spectrelib')
            optional('creeper-overhaul')
        }
    }
    if (project.hasProperty('cfModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.cfModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('creeper-overhaul')
        }
    }
    if (project.hasProperty('cfGithubToken')) {
    }
}
