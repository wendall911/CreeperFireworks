plugins {
    id 'fabric-loom'
    id 'idea'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
    id 'me.modmuss50.mod-publish-plugin'
}

version = "${minecraft_version}-${mod_version}-FABRIC"
archivesBaseName = "${mod_id}"

repositories {
    maven {
        url "https://maven.terraformersmc.com/releases"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${fabric_parchment_mc_version}:${fabric_parchment_version}@zip")
    })

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-fabric', version: "${spectrelib_range}"

    modImplementation("com.terraformersmc:modmenu:${mod_menu_version}") {
        transitive = false
    }

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")

    include group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-fabric', version: "${spectrelib_version}"

    // Testing Mods
    //modRuntimeOnly "curse.maven:mod-XXX:XXX"
}

loom {
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version
    duplicatesStrategy(DuplicatesStrategy.FAIL)

    filesMatching("fabric.mod.json") {
        expand 'version': project.version, 'fabric_mc_version_range': project.fabric_mc_version_range,
            'license': project.license, 'mod_id': project.mod_id, 'mod_author': project.mod_author,
            'mod_description': project.mod_description, 'mod_name': project.mod_name,
            'issue_tracker': project.issue_tracker, 'fabric_loader_min_version': fabric_loader_min_version,
            'mod_credits': project.mod_credits, 'java_version': project.java_version
    }

    filesMatching("pack.mcmeta") {
        expand 'mod_name': project.mod_name
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (project.hasProperty('cfcurseApiKey')) {
        apiToken = project.cfcurseApiKey
        def mainFile = upload(project.cfcurseId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
        mainFile.changelog = file(changelogFile)
        mainFile.addJavaVersion('Java 17')
        mainFile.addModLoader('Fabric')
        mainFile.releaseType = "${release_type}"
        "${release_versions}".split(',').each {
            mainFile.addGameVersion("${it}")
        }
        mainFile.addOptional('creeper-overhaul')
    }
}

modrinth {
    if (project.hasProperty('cfModrinthId')) {
        token = project.modrinthKey
        projectId = project.cfModrinthId
        version = getVersion()
        versionType = "${release_type}"
        if (file(changelogFile).exists()) {
            changelog = file(changelogFile).text
        }
        uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
        gameVersions = "${release_versions}".split(",") as List<String>
        dependencies {
            optional.project 'creeper-overhaul'
        }
    }
}

publishMods {
    file = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    changelog = file(changelogFile).text
    type = STABLE
    modLoaders.add('fabric')

    if (project.hasProperty('cfcurseApiKey')) {
        curseforge {
            accessToken = project.cfcurseApiKey
            projectId = project.cfcurseId
            javaVersions.add("${java_version}")
            clientRequired = true
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('creeper-overhaul')
        }
    }
    if (project.hasProperty('cfModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.cfModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('creeper-overhaul')
        }
    }
    if (project.hasProperty('cfGithubToken')) {
    }
}
